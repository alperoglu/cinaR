top.table <- limma::topTable(fit.voom2, coef = colnames(ccc)[i],
p.value = DA.fdr.threshold, lfc = DA.lfc.threshold,
number = Inf)
DA.peaks[[contrast.name]] <- top.table
}
View(DA.peaks)
View(top.table)
top.table <- merge(cp.meta, top.table, by = 0)
for (i in seq_len(ncol(ccc))){
contrast.name <- colnames(ccc)[i]
top.table <- limma::topTable(fit.voom2, coef = colnames(ccc)[i],
p.value = DA.fdr.threshold, lfc = DA.lfc.threshold,
number = Inf)
top.table <- merge(cp.meta, top.table, by = 0)
DA.peaks[[contrast.name]] <- top.table
}
View(DA.peaks)
DA.peaks$AA_PT
fit.trend <- lmFit(cp.metaless, design)
fit.trend <- limma::lmFit(cp.metaless, design)
fit.trend2 <- limma::eBayes(contrasts.fit(fit.trend, contrasts), trend = T)
fit.trend2 <- limma::eBayes(limma::contrasts.fit(fit.trend, contrasts),
trend = T)
fit.trend2 <- limma::eBayes(limma::contrasts.fit(fit.trend, ccc),
trend = T)
for (i in seq_len(ncol(ccc))){
contrast.name <- colnames(ccc)[i]
top.table <- topTable(fit.trend2, coef = colnames(ccc)[i],
p.value = DA.fdr.threshold,
lfc = DA.lfc.threshold,
number = Inf)
top.table <- merge(cp.meta, top.table, by = 0)
DA.peaks[[contrast.name]] <- top.table
}
for (i in seq_len(ncol(ccc))){
contrast.name <- colnames(ccc)[i]
top.table <- limma::topTable(fit.trend2, coef = colnames(ccc)[i],
p.value = DA.fdr.threshold,
lfc = DA.lfc.threshold,
number = Inf)
top.table <- merge(cp.meta, top.table, by = 0)
DA.peaks[[contrast.name]] <- top.table
}
View(DA.peaks)
#' @param cp Consensus peaks
#' @param DA.choice determines which pipeline to run:
#' (1) edgeR, (2) limma-voom, (3) limma-trend, (4) DEseq2
#' @param contrasts user-defined contrasts for comparing samples
#' @param DA.fdr.threshold fdr cut-off for differential analyses
#' @param DA.lfc.threshold log-fold change cutoff for differential analyses
#' @param save.DA.peaks saves differentially accessible peaks to an excel file
#' @return DApeaks returns DA peaks
#'
#' @export
differentialAnalyses <- function(cp, contrasts, DA.choice,
DA.fdr.threshold, DA.lfc.threshold,
save.DA.peaks) {
cp.meta <- cp[, 1:15]
cp.metaless <- cp[, 16:ncol(cp)]
if (DA.choice %in% c(1:3)) { ## edgeR, limma-voom, limma-trend
y <- edgeR::DGEList(counts = cp.metaless, group = contrasts)
# Calculate normalization factors for library sizes with TMM
y <- edgeR::calcNormFactors(y, method = "TMM")
# Add intercept term for multiple comparisons
design <- stats::model.matrix(~0 + contrasts)
rownames(design) <- colnames(cp.metaless)
colnames(design) <- levels(y$samples$group)
# Estimate dispersion for genes with Bayesian Shrinkage
cat(">> Estimating dispersion...")
y <- edgeR::estimateDisp(y, design)
# Fit the model
cat(">> Fitting GLM...")
fit.glm <- edgeR::glmQLFit(y, design)
# Create contrasts for all comparisons
combs <- utils::combn(colnames(design), 2)
contrast.names <- apply(combs, 2,function(x){paste(x, collapse = "_")})
cc <- apply(combs, 2,
function(x){
paste0(paste(x, collapse = "_"), "=", x[1], "-", x[2])
})
# create contrasts for package
eval(parse(text = paste0("ccc <- limma::makeContrasts(",
paste(cc, collapse = ","),
",levels = fit.glm$design)")))
# Create DE gene list for differentially accessible peaks
DA.peaks <- list()
if(DA.choice == 1){ ## edgeR
for (i in seq_len(ncol(ccc))){
contrast.name <- colnames(ccc)[i]
qlf <- edgeR::glmQLFTest(fit.glm,contrast = ccc[,i])
# plotMD(qlf, main = contrast.name, p.value = 0.1)
top.table <- edgeR::topTags(qlf, n = Inf, p.value = DA.fdr.threshold)$table
top.table <- merge(cp.meta, top.table, by = 0)
DA.peaks[[contrast.name]] <- top.table[abs(top.table$logFC) >= DA.lfc.threshold,]
}
} else if (DA.choice == 2) { ## limma-voom
v <- limma::voom(cp.metaless, design, plot=F)
fit.voom <- limma::lmFit(v, design)
fit.voom2 <- limma::eBayes(limma::contrasts.fit(fit.voom, ccc))
# summary(decideTests(fit.voom2, method="separate", lfc = 0, p.value = 0.1))
for (i in seq_len(ncol(ccc))){
contrast.name <- colnames(ccc)[i]
top.table <- limma::topTable(fit.voom2, coef = colnames(ccc)[i],
p.value = DA.fdr.threshold, lfc = DA.lfc.threshold,
number = Inf)
top.table <- merge(cp.meta, top.table, by = 0)
DA.peaks[[contrast.name]] <- top.table
}
} else if (DA.choice == 3){ ## limma-trend
fit.trend <- limma::lmFit(cp.metaless, design)
fit.trend2 <- limma::eBayes(limma::contrasts.fit(fit.trend, ccc),
trend = T)
# summary(decideTests(fit.trend2, method="separate", lfc = 0, p.value = 0.1))
for (i in seq_len(ncol(ccc))){
contrast.name <- colnames(ccc)[i]
top.table <- limma::topTable(fit.trend2, coef = colnames(ccc)[i],
p.value = DA.fdr.threshold,
lfc = DA.lfc.threshold,
number = Inf)
top.table <- merge(cp.meta, top.table, by = 0)
DA.peaks[[contrast.name]] <- top.table
}
}
}
}
#' @param cp Consensus peaks
#' @param DA.choice determines which pipeline to run:
#' (1) edgeR, (2) limma-voom, (3) limma-trend, (4) DEseq2
#' @param contrasts user-defined contrasts for comparing samples
#' @param DA.fdr.threshold fdr cut-off for differential analyses
#' @param DA.lfc.threshold log-fold change cutoff for differential analyses
#' @param save.DA.peaks saves differentially accessible peaks to an excel file
#' @return DApeaks returns DA peaks
#'
#' @export
differentialAnalyses <- function(cp, contrasts, DA.choice,
DA.fdr.threshold, DA.lfc.threshold,
save.DA.peaks) {
cp.meta <- cp[, 1:15]
cp.metaless <- cp[, 16:ncol(cp)]
if (DA.choice %in% c(1:3)) { ## edgeR, limma-voom, limma-trend
y <- edgeR::DGEList(counts = cp.metaless, group = contrasts)
# Calculate normalization factors for library sizes with TMM
y <- edgeR::calcNormFactors(y, method = "TMM")
# Add intercept term for multiple comparisons
design <- stats::model.matrix(~0 + contrasts)
rownames(design) <- colnames(cp.metaless)
colnames(design) <- levels(y$samples$group)
# Estimate dispersion for genes with Bayesian Shrinkage
cat(">> Estimating dispersion...")
y <- edgeR::estimateDisp(y, design)
# Fit the model
cat(">> Fitting GLM...")
fit.glm <- edgeR::glmQLFit(y, design)
# Create contrasts for all comparisons
combs <- utils::combn(colnames(design), 2)
contrast.names <- apply(combs, 2,function(x){paste(x, collapse = "_")})
cc <- apply(combs, 2,
function(x){
paste0(paste(x, collapse = "_"), "=", x[1], "-", x[2])
})
# create contrasts for package
eval(parse(text = paste0("ccc <- limma::makeContrasts(",
paste(cc, collapse = ","),
",levels = fit.glm$design)")))
# Create DE gene list for differentially accessible peaks
DA.peaks <- list()
if(DA.choice == 1){ ## edgeR
for (i in seq_len(ncol(ccc))){
contrast.name <- colnames(ccc)[i]
qlf <- edgeR::glmQLFTest(fit.glm,contrast = ccc[,i])
# plotMD(qlf, main = contrast.name, p.value = 0.1)
top.table <- edgeR::topTags(qlf, n = Inf, p.value = DA.fdr.threshold)$table
top.table <- merge(cp.meta, top.table, by = 0)
DA.peaks[[contrast.name]] <- top.table[abs(top.table$logFC) >= DA.lfc.threshold,]
}
} else if (DA.choice == 2) { ## limma-voom
v <- limma::voom(cp.metaless, design, plot=F)
fit.voom <- limma::lmFit(v, design)
fit.voom2 <- limma::eBayes(limma::contrasts.fit(fit.voom, ccc))
# summary(decideTests(fit.voom2, method="separate", lfc = 0, p.value = 0.1))
for (i in seq_len(ncol(ccc))){
contrast.name <- colnames(ccc)[i]
top.table <- limma::topTable(fit.voom2, coef = colnames(ccc)[i],
p.value = DA.fdr.threshold, lfc = DA.lfc.threshold,
number = Inf)
top.table <- merge(cp.meta, top.table, by = 0)
DA.peaks[[contrast.name]] <- top.table
}
} else if (DA.choice == 3){ ## limma-trend
fit.trend <- limma::lmFit(cp.metaless, design)
fit.trend2 <- limma::eBayes(limma::contrasts.fit(fit.trend, ccc),
trend = T)
# summary(decideTests(fit.trend2, method="separate", lfc = 0, p.value = 0.1))
for (i in seq_len(ncol(ccc))){
contrast.name <- colnames(ccc)[i]
top.table <- limma::topTable(fit.trend2, coef = colnames(ccc)[i],
p.value = DA.fdr.threshold,
lfc = DA.lfc.threshold,
number = Inf)
top.table <- merge(cp.meta, top.table, by = 0)
DA.peaks[[contrast.name]] <- top.table
}
} # else-if #3
} # if
return(DA.peaks)
}
final.peaks
save.DA.peaks <- T
DA.results <- differentialAnalyses(cp = final.peaks,
contrasts = contrasts,
DA.choice = DA.choice,
DA.fdr.threshold = DA.fdr.threshold,
DA.lfc.threshold = DA.lfc.threshold,
save.DA.peaks = save.DA.peaks)
View(DA.results)
# Estimate dispersion for genes with Bayesian Shrinkage
cat(">> Estimating dispersion...\n")
cat("Method: edgeR\nFDR:", DA.fdr.threshold, "\nabs(logFC)<", DA.lfc.threshold)
cat("Method: edgeR\nFDR:", DA.fdr.threshold, "\tabs(logFC)<", DA.lfc.threshold)
cat("Method: edgeR\nFDR:", DA.fdr.threshold, "&\tabs(logFC)<", DA.lfc.threshold)
cat("Method: edgeR\nFDR:", DA.fdr.threshold, "& abs(logFC)<", DA.lfc.threshold)
cat("Method: edgeR\nFDR:", DA.fdr.threshold, "& abs(logFC)<", DA.lfc.threshold, "\n")
cat("Method: limma-trend\nFDR:", DA.fdr.threshold, "& abs(logFC)<", DA.lfc.threshold, "\n")
#' @param cp Consensus peaks
#' @param DA.choice determines which pipeline to run:
#' (1) edgeR, (2) limma-voom, (3) limma-trend, (4) DEseq2
#' @param contrasts user-defined contrasts for comparing samples
#' @param DA.fdr.threshold fdr cut-off for differential analyses
#' @param DA.lfc.threshold log-fold change cutoff for differential analyses
#' @param save.DA.peaks saves differentially accessible peaks to an excel file
#' @return DApeaks returns DA peaks
#'
#' @export
differentialAnalyses <- function(cp, contrasts, DA.choice,
DA.fdr.threshold, DA.lfc.threshold,
save.DA.peaks) {
cp.meta <- cp[, 1:15]
cp.metaless <- cp[, 16:ncol(cp)]
if (DA.choice %in% c(1:3)) { ## edgeR, limma-voom, limma-trend
y <- edgeR::DGEList(counts = cp.metaless, group = contrasts)
# Calculate normalization factors for library sizes with TMM
y <- edgeR::calcNormFactors(y, method = "TMM")
# Add intercept term for multiple comparisons
design <- stats::model.matrix(~0 + contrasts)
rownames(design) <- colnames(cp.metaless)
colnames(design) <- levels(y$samples$group)
# Estimate dispersion for genes with Bayesian Shrinkage
cat(">> Estimating dispersion...\n")
y <- edgeR::estimateDisp(y, design)
# Fit the model
cat(">> Fitting GLM...\n")
fit.glm <- edgeR::glmQLFit(y, design)
# Create contrasts for all comparisons
combs <- utils::combn(colnames(design), 2)
contrast.names <- apply(combs, 2,function(x){paste(x, collapse = "_")})
cc <- apply(combs, 2,
function(x){
paste0(paste(x, collapse = "_"), "=", x[1], "-", x[2])
})
# create contrasts for package
eval(parse(text = paste0("ccc <- limma::makeContrasts(",
paste(cc, collapse = ","),
",levels = fit.glm$design)")))
# Create DE gene list for differentially accessible peaks
DA.peaks <- list()
if(DA.choice == 1){ ## edgeR
cat("Method: edgeR\nFDR:", DA.fdr.threshold, "& abs(logFC)<", DA.lfc.threshold, "\n")
for (i in seq_len(ncol(ccc))){
contrast.name <- colnames(ccc)[i]
qlf <- edgeR::glmQLFTest(fit.glm,contrast = ccc[,i])
# plotMD(qlf, main = contrast.name, p.value = 0.1)
top.table <- edgeR::topTags(qlf, n = Inf, p.value = DA.fdr.threshold)$table
top.table <- merge(cp.meta, top.table, by = 0)
DA.peaks[[contrast.name]] <- top.table[abs(top.table$logFC) >= DA.lfc.threshold,]
}
} else if (DA.choice == 2) { ## limma-voom
cat("Method: limma-voom\nFDR:", DA.fdr.threshold, "& abs(logFC)<", DA.lfc.threshold, "\n")
v <- limma::voom(cp.metaless, design, plot=F)
fit.voom <- limma::lmFit(v, design)
fit.voom2 <- limma::eBayes(limma::contrasts.fit(fit.voom, ccc))
# summary(decideTests(fit.voom2, method="separate", lfc = 0, p.value = 0.1))
for (i in seq_len(ncol(ccc))){
contrast.name <- colnames(ccc)[i]
top.table <- limma::topTable(fit.voom2, coef = colnames(ccc)[i],
p.value = DA.fdr.threshold, lfc = DA.lfc.threshold,
number = Inf)
top.table <- merge(cp.meta, top.table, by = 0)
DA.peaks[[contrast.name]] <- top.table
}
} else if (DA.choice == 3){ ## limma-trend
cat("Method: limma-trend\nFDR:", DA.fdr.threshold, "& abs(logFC)<", DA.lfc.threshold, "\n")
fit.trend <- limma::lmFit(cp.metaless, design)
fit.trend2 <- limma::eBayes(limma::contrasts.fit(fit.trend, ccc),
trend = T)
# summary(decideTests(fit.trend2, method="separate", lfc = 0, p.value = 0.1))
for (i in seq_len(ncol(ccc))){
contrast.name <- colnames(ccc)[i]
top.table <- limma::topTable(fit.trend2, coef = colnames(ccc)[i],
p.value = DA.fdr.threshold,
lfc = DA.lfc.threshold,
number = Inf)
top.table <- merge(cp.meta, top.table, by = 0)
DA.peaks[[contrast.name]] <- top.table
}
} # else-if #3
} # if
return(DA.peaks)
}
DA.results <- differentialAnalyses(cp = final.peaks,
contrasts = contrasts,
DA.choice = DA.choice,
DA.fdr.threshold = DA.fdr.threshold,
DA.lfc.threshold = DA.lfc.threshold,
save.DA.peaks = save.DA.peaks)
cat(">> Done!")
#' @param cp Consensus peaks
#' @param DA.choice determines which pipeline to run:
#' (1) edgeR, (2) limma-voom, (3) limma-trend, (4) DEseq2
#' @param contrasts user-defined contrasts for comparing samples
#' @param DA.fdr.threshold fdr cut-off for differential analyses
#' @param DA.lfc.threshold log-fold change cutoff for differential analyses
#' @param save.DA.peaks saves differentially accessible peaks to an excel file
#' @return DApeaks returns DA peaks
#'
#' @export
differentialAnalyses <- function(cp, contrasts, DA.choice,
DA.fdr.threshold, DA.lfc.threshold,
save.DA.peaks) {
cp.meta <- cp[, 1:15]
cp.metaless <- cp[, 16:ncol(cp)]
if (DA.choice %in% c(1:3)) { ## edgeR, limma-voom, limma-trend
y <- edgeR::DGEList(counts = cp.metaless, group = contrasts)
# Calculate normalization factors for library sizes with TMM
y <- edgeR::calcNormFactors(y, method = "TMM")
# Add intercept term for multiple comparisons
design <- stats::model.matrix(~0 + contrasts)
rownames(design) <- colnames(cp.metaless)
colnames(design) <- levels(y$samples$group)
# Estimate dispersion for genes with Bayesian Shrinkage
cat(">> Estimating dispersion...\n")
y <- edgeR::estimateDisp(y, design)
# Fit the model
cat(">> Fitting GLM...\n")
fit.glm <- edgeR::glmQLFit(y, design)
# Create contrasts for all comparisons
combs <- utils::combn(colnames(design), 2)
contrast.names <- apply(combs, 2,function(x){paste(x, collapse = "_")})
cc <- apply(combs, 2,
function(x){
paste0(paste(x, collapse = "_"), "=", x[1], "-", x[2])
})
# create contrasts for package
eval(parse(text = paste0("ccc <- limma::makeContrasts(",
paste(cc, collapse = ","),
",levels = fit.glm$design)")))
# Create DE gene list for differentially accessible peaks
DA.peaks <- list()
if(DA.choice == 1){ ## edgeR
cat(">> Method: edgeR\nFDR:", DA.fdr.threshold, "& abs(logFC)<", DA.lfc.threshold, "\n")
for (i in seq_len(ncol(ccc))){
contrast.name <- colnames(ccc)[i]
qlf <- edgeR::glmQLFTest(fit.glm,contrast = ccc[,i])
# plotMD(qlf, main = contrast.name, p.value = 0.1)
top.table <- edgeR::topTags(qlf, n = Inf, p.value = DA.fdr.threshold)$table
top.table <- merge(cp.meta, top.table, by = 0)
DA.peaks[[contrast.name]] <- top.table[abs(top.table$logFC) >= DA.lfc.threshold,]
}
} else if (DA.choice == 2) { ## limma-voom
cat(">> Method: limma-voom\nFDR:", DA.fdr.threshold, "& abs(logFC)<", DA.lfc.threshold, "\n")
v <- limma::voom(cp.metaless, design, plot=F)
fit.voom <- limma::lmFit(v, design)
fit.voom2 <- limma::eBayes(limma::contrasts.fit(fit.voom, ccc))
# summary(decideTests(fit.voom2, method="separate", lfc = 0, p.value = 0.1))
for (i in seq_len(ncol(ccc))){
contrast.name <- colnames(ccc)[i]
top.table <- limma::topTable(fit.voom2, coef = colnames(ccc)[i],
p.value = DA.fdr.threshold, lfc = DA.lfc.threshold,
number = Inf)
top.table <- merge(cp.meta, top.table, by = 0)
DA.peaks[[contrast.name]] <- top.table
}
} else if (DA.choice == 3){ ## limma-trend
cat(">> Method: limma-trend\nFDR:", DA.fdr.threshold, "& abs(logFC)<", DA.lfc.threshold, "\n")
fit.trend <- limma::lmFit(cp.metaless, design)
fit.trend2 <- limma::eBayes(limma::contrasts.fit(fit.trend, ccc),
trend = T)
# summary(decideTests(fit.trend2, method="separate", lfc = 0, p.value = 0.1))
for (i in seq_len(ncol(ccc))){
contrast.name <- colnames(ccc)[i]
top.table <- limma::topTable(fit.trend2, coef = colnames(ccc)[i],
p.value = DA.fdr.threshold,
lfc = DA.lfc.threshold,
number = Inf)
top.table <- merge(cp.meta, top.table, by = 0)
DA.peaks[[contrast.name]] <- top.table
}
} # else-if #3
} # if
cat(">> Done!\n")
return(DA.peaks)
}
DA.results <- differentialAnalyses(cp = final.peaks,
contrasts = contrasts,
DA.choice = DA.choice,
DA.fdr.threshold = DA.fdr.threshold,
DA.lfc.threshold = DA.lfc.threshold,
save.DA.peaks = save.DA.peaks)
#' @param cp Consensus peaks
#' @param DA.choice determines which pipeline to run:
#' (1) edgeR, (2) limma-voom, (3) limma-trend, (4) DEseq2
#' @param contrasts user-defined contrasts for comparing samples
#' @param DA.fdr.threshold fdr cut-off for differential analyses
#' @param DA.lfc.threshold log-fold change cutoff for differential analyses
#' @param save.DA.peaks saves differentially accessible peaks to an excel file
#' @return DApeaks returns DA peaks
#'
#' @export
differentialAnalyses <- function(cp, contrasts, DA.choice,
DA.fdr.threshold, DA.lfc.threshold,
save.DA.peaks) {
cp.meta <- cp[, 1:15]
cp.metaless <- cp[, 16:ncol(cp)]
if (DA.choice %in% c(1:3)) { ## edgeR, limma-voom, limma-trend
y <- edgeR::DGEList(counts = cp.metaless, group = contrasts)
# Calculate normalization factors for library sizes with TMM
y <- edgeR::calcNormFactors(y, method = "TMM")
# Add intercept term for multiple comparisons
design <- stats::model.matrix(~0 + contrasts)
rownames(design) <- colnames(cp.metaless)
colnames(design) <- levels(y$samples$group)
# Estimate dispersion for genes with Bayesian Shrinkage
cat(">> Estimating dispersion...\n")
y <- edgeR::estimateDisp(y, design)
# Fit the model
cat(">> Fitting GLM...\n")
fit.glm <- edgeR::glmQLFit(y, design)
# Create contrasts for all comparisons
combs <- utils::combn(colnames(design), 2)
contrast.names <- apply(combs, 2,function(x){paste(x, collapse = "_")})
cc <- apply(combs, 2,
function(x){
paste0(paste(x, collapse = "_"), "=", x[1], "-", x[2])
})
# create contrasts for package
eval(parse(text = paste0("ccc <- limma::makeContrasts(",
paste(cc, collapse = ","),
",levels = fit.glm$design)")))
# Create DE gene list for differentially accessible peaks
DA.peaks <- list()
if(DA.choice == 1){ ## edgeR
cat(">> Method: edgeR\n\tFDR:", DA.fdr.threshold, "& abs(logFC)<", DA.lfc.threshold, "\n")
for (i in seq_len(ncol(ccc))){
contrast.name <- colnames(ccc)[i]
qlf <- edgeR::glmQLFTest(fit.glm,contrast = ccc[,i])
# plotMD(qlf, main = contrast.name, p.value = 0.1)
top.table <- edgeR::topTags(qlf, n = Inf, p.value = DA.fdr.threshold)$table
top.table <- merge(cp.meta, top.table, by = 0)
DA.peaks[[contrast.name]] <- top.table[abs(top.table$logFC) >= DA.lfc.threshold,]
}
} else if (DA.choice == 2) { ## limma-voom
cat(">> Method: limma-voom\n\tFDR:", DA.fdr.threshold, "& abs(logFC)<", DA.lfc.threshold, "\n")
v <- limma::voom(cp.metaless, design, plot=F)
fit.voom <- limma::lmFit(v, design)
fit.voom2 <- limma::eBayes(limma::contrasts.fit(fit.voom, ccc))
# summary(decideTests(fit.voom2, method="separate", lfc = 0, p.value = 0.1))
for (i in seq_len(ncol(ccc))){
contrast.name <- colnames(ccc)[i]
top.table <- limma::topTable(fit.voom2, coef = colnames(ccc)[i],
p.value = DA.fdr.threshold, lfc = DA.lfc.threshold,
number = Inf)
top.table <- merge(cp.meta, top.table, by = 0)
DA.peaks[[contrast.name]] <- top.table
}
} else if (DA.choice == 3){ ## limma-trend
cat(">> Method: limma-trend\n\tFDR:", DA.fdr.threshold, "& abs(logFC)<", DA.lfc.threshold, "\n")
fit.trend <- limma::lmFit(cp.metaless, design)
fit.trend2 <- limma::eBayes(limma::contrasts.fit(fit.trend, ccc),
trend = T)
# summary(decideTests(fit.trend2, method="separate", lfc = 0, p.value = 0.1))
for (i in seq_len(ncol(ccc))){
contrast.name <- colnames(ccc)[i]
top.table <- limma::topTable(fit.trend2, coef = colnames(ccc)[i],
p.value = DA.fdr.threshold,
lfc = DA.lfc.threshold,
number = Inf)
top.table <- merge(cp.meta, top.table, by = 0)
DA.peaks[[contrast.name]] <- top.table
}
} # else-if #3
} # if
cat(">> DA peaks are found\n")
return(DA.peaks)
}
DA.results <- differentialAnalyses(cp = final.peaks,
contrasts = contrasts,
DA.choice = DA.choice,
DA.fdr.threshold = DA.fdr.threshold,
DA.lfc.threshold = DA.lfc.threshold,
save.DA.peaks = save.DA.peaks)
View(DA.results)
DA.results$AA_PT
document()
rm(list = c("cinaR", "differentialAnalyses"))
document()
data("atac_seq_consensus_bm")
data("atac_seq_consensus_bm")
reference.genome
reference.genome <- "mm10"
a <- cinaR::cinaR(bed, contrasts, reference.genome = reference.genome)
View(a)
a[["AA_PT"]]
